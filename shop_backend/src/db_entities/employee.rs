//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "employee")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub password_hash: String,
    pub name: String,
    pub role: Role,
}

impl From<Model> for crate::Employee {
    fn from(value: Model) -> Self {
        crate::Employee::new(value.id as u32, &value.name, value.role)
    }
}

#[derive(Clone, Copy, Debug, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "role")]
pub enum Role {
    #[sea_orm(string_value = "Technician")]
    Technician,
    #[sea_orm(string_value = "Mechanic")]
    Mechanic,
}

impl std::fmt::Display for Role {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Role::Technician => f.write_str("technician"),
            Role::Mechanic => f.write_str("mechanic"),
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
